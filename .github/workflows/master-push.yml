name: "Master Push"
on:
  push:
    branches:
      - master

jobs:
  nix-flake-release:
    name: 'Nix flake release'
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            os: ubuntu-latest
          - runner: macos-12
            os: macos-12
          - runner: MacM1
            os: self-macos-12
    runs-on: ${{ matrix.runner }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3

      - name: 'Upgrade bash'
        if: ${{ contains(matrix.os, 'macos') }}
        run: brew install bash

      - name: 'Set up Nix/Cachix'
        if: ${{ !startsWith(matrix.os, 'self') }}
        uses: ./.github/actions/install-nix-cachix
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cachix-key: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: 'Build and cache K Framework'
        uses: workflow/nix-shell-action@v3
        env:
          GC_DONT_GC: 1
          CACHIX_AUTH_TOKEN: '${{ secrets.RV_DEVOPS_CACHIX_TOKEN }}'
        with:
          packages: jq
          script: |
            k=$(nix build .#k --json | jq -r '.[].outputs | to_entries[].value')
            drv=$(nix-store --query --deriver ${k})
            nix-store --query --requisites --include-outputs ${drv} | cachix push k-framework

      - name: 'Build and cache kup'
        uses: workflow/nix-shell-action@v3
        env:
          GC_DONT_GC: 1
          CACHIX_AUTH_TOKEN: '${{ secrets.RV_DEVOPS_CACHIX_TOKEN }}'
        with:
          packages: jq
          script: |
            kup=$(nix build .#kup --json | jq -r '.[].outputs | to_entries[].value')
            drv=$(nix-store --query --deriver ${kup})
            nix-store --query --requisites --include-outputs ${drv} | cachix push k-framework
